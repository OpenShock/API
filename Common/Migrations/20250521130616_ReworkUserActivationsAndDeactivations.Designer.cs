// <auto-generated />
using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OpenShock.Common.Models;
using OpenShock.Common.OpenShockDb;

#nullable disable

namespace OpenShock.Common.Migrations
{
    [DbContext(typeof(MigrationOpenShockContext))]
    [Migration("20250521130616_ReworkUserActivationsAndDeactivations")]
    partial class ReworkUserActivationsAndDeactivations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:public.ndcoll", "und-u-ks-level2,und-u-ks-level2,icu,False")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "control_type", new[] { "sound", "vibrate", "shock", "stop" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "ota_update_status", new[] { "started", "running", "finished", "error", "timeout" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "password_encryption_type", new[] { "pbkdf2", "bcrypt_enhanced" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "permission_type", new[] { "shockers.use", "shockers.edit", "shockers.pause", "devices.edit", "devices.auth" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_type", new[] { "support", "staff", "admin", "system" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "shocker_model_type", new[] { "caiXianlin", "petTrainer", "petrainer998DR" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.AdminUsersView", b =>
                {
                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("activated_at");

                    b.Property<int>("ApiTokenCount")
                        .HasColumnType("integer")
                        .HasColumnName("api_token_count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at");

                    b.Property<Guid?>("DeactivatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("DeviceCount")
                        .HasColumnType("integer")
                        .HasColumnName("device_count");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<int>("EmailChangeRequestCount")
                        .HasColumnType("integer")
                        .HasColumnName("email_change_request_count");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int>("NameChangeRequestCount")
                        .HasColumnType("integer")
                        .HasColumnName("name_change_request_count");

                    b.Property<string>("PasswordHashType")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password_hash_type");

                    b.Property<int>("PasswordResetCount")
                        .HasColumnType("integer")
                        .HasColumnName("password_reset_count");

                    b.Property<RoleType[]>("Roles")
                        .IsRequired()
                        .HasColumnType("role_type[]")
                        .HasColumnName("roles");

                    b.Property<int>("ShockerControlLogCount")
                        .HasColumnType("integer")
                        .HasColumnName("shocker_control_log_count");

                    b.Property<int>("ShockerCount")
                        .HasColumnType("integer")
                        .HasColumnName("shocker_count");

                    b.Property<int>("ShockerPublicShareCount")
                        .HasColumnType("integer")
                        .HasColumnName("shocker_public_share_count");

                    b.Property<int>("ShockerUserShareCount")
                        .HasColumnType("integer")
                        .HasColumnName("shocker_user_share_count");

                    b.ToTable((string)null);

                    b.ToView("admin_users_view", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.ApiToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<IPAddress>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("created_by_ip");

                    b.Property<DateTime>("LastUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used")
                        .HasDefaultValueSql("'-infinity'::timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.PrimitiveCollection<List<PermissionType>>("Permissions")
                        .IsRequired()
                        .HasColumnType("permission_type[]")
                        .HasColumnName("permissions");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_until");

                    b.HasKey("Id")
                        .HasName("api_tokens_pkey");

                    b.HasIndex("TokenHash")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("ValidUntil");

                    b.ToTable("api_tokens", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("devices_pkey");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.DeviceOtaUpdate", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("message");

                    b.Property<OtaUpdateStatus>("Status")
                        .HasColumnType("ota_update_status")
                        .HasColumnName("status");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("version");

                    b.HasKey("DeviceId", "UpdateId")
                        .HasName("device_ota_updates_pkey");

                    b.HasIndex(new[] { "CreatedAt" }, "device_ota_updates_created_at_idx");

                    b.ToTable("device_ota_updates", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.PublicShare", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("public_shares_pkey");

                    b.HasIndex("OwnerId");

                    b.ToTable("public_shares", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.PublicShareShocker", b =>
                {
                    b.Property<Guid>("PublicShareId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_share_id");

                    b.Property<Guid>("ShockerId")
                        .HasColumnType("uuid")
                        .HasColumnName("shocker_id");

                    b.Property<bool>("AllowLiveControl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("allow_livecontrol");

                    b.Property<bool>("AllowShock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_shock");

                    b.Property<bool>("AllowSound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_sound");

                    b.Property<bool>("AllowVibrate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_vibrate");

                    b.Property<int?>("Cooldown")
                        .HasColumnType("integer")
                        .HasColumnName("cooldown");

                    b.Property<bool>("IsPaused")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_paused");

                    b.Property<int?>("MaxDuration")
                        .HasColumnType("integer")
                        .HasColumnName("max_duration");

                    b.Property<byte?>("MaxIntensity")
                        .HasColumnType("smallint")
                        .HasColumnName("max_intensity");

                    b.HasKey("PublicShareId", "ShockerId")
                        .HasName("public_share_shockers_pkey");

                    b.HasIndex("ShockerId");

                    b.ToTable("public_share_shockers", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.Shocker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<bool>("IsPaused")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_paused");

                    b.Property<ShockerModelType>("Model")
                        .HasColumnType("shocker_model_type")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int>("RfId")
                        .HasColumnType("integer")
                        .HasColumnName("rf_id");

                    b.HasKey("Id")
                        .HasName("shockers_pkey");

                    b.HasIndex("DeviceId");

                    b.ToTable("shockers", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.ShockerControlLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ControlledByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("controlled_by_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("custom_name");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint")
                        .HasColumnName("duration");

                    b.Property<byte>("Intensity")
                        .HasColumnType("smallint")
                        .HasColumnName("intensity");

                    b.Property<bool>("LiveControl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("live_control");

                    b.Property<Guid>("ShockerId")
                        .HasColumnType("uuid")
                        .HasColumnName("shocker_id");

                    b.Property<ControlType>("Type")
                        .HasColumnType("control_type")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("shocker_control_logs_pkey");

                    b.HasIndex("ControlledByUserId");

                    b.HasIndex("ShockerId");

                    b.ToTable("shocker_control_logs", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.ShockerShareCode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AllowLiveControl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_livecontrol");

                    b.Property<bool>("AllowShock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_shock");

                    b.Property<bool>("AllowSound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_sound");

                    b.Property<bool>("AllowVibrate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_vibrate");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsPaused")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_paused");

                    b.Property<int?>("MaxDuration")
                        .HasColumnType("integer")
                        .HasColumnName("max_duration");

                    b.Property<byte?>("MaxIntensity")
                        .HasColumnType("smallint")
                        .HasColumnName("max_intensity");

                    b.Property<Guid>("ShockerId")
                        .HasColumnType("uuid")
                        .HasColumnName("shocker_id");

                    b.HasKey("Id")
                        .HasName("shocker_share_codes_pkey");

                    b.HasIndex("ShockerId");

                    b.ToTable("shocker_share_codes", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("activated_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name")
                        .UseCollation("ndcoll");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password_hash");

                    b.PrimitiveCollection<List<RoleType>>("Roles")
                        .IsRequired()
                        .HasColumnType("role_type[]")
                        .HasColumnName("roles");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Name"), new[] { "ndcoll" });

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserActivationRequest", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EmailSendAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("email_send_attempts");

                    b.Property<string>("SecretHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("secret");

                    b.HasKey("UserId")
                        .HasName("user_activation_requests_pkey");

                    b.ToTable("user_activation_requests", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserDeactivation", b =>
                {
                    b.Property<Guid>("DeactivatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("deactivated_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DeactivatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("deactivated_by_user_id");

                    b.Property<bool>("DeleteLater")
                        .HasColumnType("boolean")
                        .HasColumnName("delete_later");

                    b.Property<Guid?>("UserModerationId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_moderation_id");

                    b.HasKey("DeactivatedUserId")
                        .HasName("user_deactivations_pkey");

                    b.HasIndex("DeactivatedByUserId");

                    b.ToTable("user_deactivations", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserEmailChange", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("SecretHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("secret");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_email_changes_pkey");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UsedAt");

                    b.HasIndex("UserId");

                    b.ToTable("user_email_changes", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserNameChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("OldName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("old_name");

                    b.HasKey("Id", "UserId")
                        .HasName("user_name_changes_pkey");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("OldName");

                    b.HasIndex("UserId");

                    b.ToTable("user_name_changes", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserPasswordReset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SecretHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("secret");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_password_resets_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("user_password_resets", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserShare", b =>
                {
                    b.Property<Guid>("SharedWithUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("shared_with_user_id");

                    b.Property<Guid>("ShockerId")
                        .HasColumnType("uuid")
                        .HasColumnName("shocker_id");

                    b.Property<bool>("AllowLiveControl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_livecontrol");

                    b.Property<bool>("AllowShock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_shock");

                    b.Property<bool>("AllowSound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_sound");

                    b.Property<bool>("AllowVibrate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_vibrate");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsPaused")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_paused");

                    b.Property<int?>("MaxDuration")
                        .HasColumnType("integer")
                        .HasColumnName("max_duration");

                    b.Property<byte?>("MaxIntensity")
                        .HasColumnType("smallint")
                        .HasColumnName("max_intensity");

                    b.HasKey("SharedWithUserId", "ShockerId")
                        .HasName("user_shares_pkey");

                    b.HasIndex("SharedWithUserId");

                    b.HasIndex("ShockerId");

                    b.ToTable("user_shares", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserShareInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("RecipientUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_share_invites_pkey");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RecipientUserId");

                    b.ToTable("user_share_invites", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserShareInviteShocker", b =>
                {
                    b.Property<Guid>("InviteId")
                        .HasColumnType("uuid")
                        .HasColumnName("invite_id");

                    b.Property<Guid>("ShockerId")
                        .HasColumnType("uuid")
                        .HasColumnName("shocker_id");

                    b.Property<bool>("AllowLiveControl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_livecontrol");

                    b.Property<bool>("AllowShock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_shock");

                    b.Property<bool>("AllowSound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_sound");

                    b.Property<bool>("AllowVibrate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_vibrate");

                    b.Property<bool>("IsPaused")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_paused");

                    b.Property<int?>("MaxDuration")
                        .HasColumnType("integer")
                        .HasColumnName("max_duration");

                    b.Property<byte?>("MaxIntensity")
                        .HasColumnType("smallint")
                        .HasColumnName("max_intensity");

                    b.HasKey("InviteId", "ShockerId")
                        .HasName("user_share_invite_shockers_pkey");

                    b.HasIndex("ShockerId");

                    b.ToTable("user_share_invite_shockers", (string)null);
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.ApiToken", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.User", "User")
                        .WithMany("ApiTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_tokens_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.Device", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.User", "Owner")
                        .WithMany("Devices")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_devices_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.DeviceOtaUpdate", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.Device", "Device")
                        .WithMany("OtaUpdates")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_device_ota_updates_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.PublicShare", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.User", "Owner")
                        .WithMany("OwnedPublicShares")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_public_shares_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.PublicShareShocker", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.PublicShare", "PublicShare")
                        .WithMany("ShockerMappings")
                        .HasForeignKey("PublicShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_public_share_shockers_public_share_id");

                    b.HasOne("OpenShock.Common.OpenShockDb.Shocker", "Shocker")
                        .WithMany("PublicShareMappings")
                        .HasForeignKey("ShockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_public_share_shockers_shocker_id");

                    b.Navigation("PublicShare");

                    b.Navigation("Shocker");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.Shocker", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.Device", "Device")
                        .WithMany("Shockers")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shockers_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.ShockerControlLog", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.User", "ControlledByUser")
                        .WithMany("ShockerControlLogs")
                        .HasForeignKey("ControlledByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_shocker_control_logs_controlled_by_user_id");

                    b.HasOne("OpenShock.Common.OpenShockDb.Shocker", "Shocker")
                        .WithMany("ShockerControlLogs")
                        .HasForeignKey("ShockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shocker_control_logs_shocker_id");

                    b.Navigation("ControlledByUser");

                    b.Navigation("Shocker");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.ShockerShareCode", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.Shocker", "Shocker")
                        .WithMany("ShockerShareCodes")
                        .HasForeignKey("ShockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shocker_share_codes_shocker_id");

                    b.Navigation("Shocker");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserActivationRequest", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.User", "User")
                        .WithOne("UserActivationRequest")
                        .HasForeignKey("OpenShock.Common.OpenShockDb.UserActivationRequest", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_activation_requests_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserDeactivation", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.User", "DeactivatedByUser")
                        .WithMany()
                        .HasForeignKey("DeactivatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_deactivations_deactivated_by_user_id");

                    b.HasOne("OpenShock.Common.OpenShockDb.User", "DeactivatedUser")
                        .WithOne("UserDeactivation")
                        .HasForeignKey("OpenShock.Common.OpenShockDb.UserDeactivation", "DeactivatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_deactivations_deactivated_user_id");

                    b.Navigation("DeactivatedByUser");

                    b.Navigation("DeactivatedUser");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserEmailChange", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.User", "User")
                        .WithMany("EmailChanges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_email_changes_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserNameChange", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.User", "User")
                        .WithMany("NameChanges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_name_changes_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserPasswordReset", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.User", "User")
                        .WithMany("PasswordResets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_password_resets_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserShare", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.User", "SharedWithUser")
                        .WithMany("IncomingUserShares")
                        .HasForeignKey("SharedWithUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_shares_shared_with_user_id");

                    b.HasOne("OpenShock.Common.OpenShockDb.Shocker", "Shocker")
                        .WithMany("UserShares")
                        .HasForeignKey("ShockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_shares_shocker_id");

                    b.Navigation("SharedWithUser");

                    b.Navigation("Shocker");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserShareInvite", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.User", "Owner")
                        .WithMany("OutgoingUserShareInvites")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_share_invites_owner_id");

                    b.HasOne("OpenShock.Common.OpenShockDb.User", "RecipientUser")
                        .WithMany("IncomingUserShareInvites")
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_share_invites_recipient_user_id");

                    b.Navigation("Owner");

                    b.Navigation("RecipientUser");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserShareInviteShocker", b =>
                {
                    b.HasOne("OpenShock.Common.OpenShockDb.UserShareInvite", "Invite")
                        .WithMany("ShockerMappings")
                        .HasForeignKey("InviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_share_invite_shockers_invite_id");

                    b.HasOne("OpenShock.Common.OpenShockDb.Shocker", "Shocker")
                        .WithMany("UserShareInviteShockerMappings")
                        .HasForeignKey("ShockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_share_invite_shockers_shocker_id");

                    b.Navigation("Invite");

                    b.Navigation("Shocker");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.Device", b =>
                {
                    b.Navigation("OtaUpdates");

                    b.Navigation("Shockers");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.PublicShare", b =>
                {
                    b.Navigation("ShockerMappings");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.Shocker", b =>
                {
                    b.Navigation("PublicShareMappings");

                    b.Navigation("ShockerControlLogs");

                    b.Navigation("ShockerShareCodes");

                    b.Navigation("UserShareInviteShockerMappings");

                    b.Navigation("UserShares");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.User", b =>
                {
                    b.Navigation("ApiTokens");

                    b.Navigation("Devices");

                    b.Navigation("EmailChanges");

                    b.Navigation("IncomingUserShareInvites");

                    b.Navigation("IncomingUserShares");

                    b.Navigation("NameChanges");

                    b.Navigation("OutgoingUserShareInvites");

                    b.Navigation("OwnedPublicShares");

                    b.Navigation("PasswordResets");

                    b.Navigation("ShockerControlLogs");

                    b.Navigation("UserActivationRequest");

                    b.Navigation("UserDeactivation");
                });

            modelBuilder.Entity("OpenShock.Common.OpenShockDb.UserShareInvite", b =>
                {
                    b.Navigation("ShockerMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
